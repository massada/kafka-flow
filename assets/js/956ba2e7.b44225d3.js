"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9557],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),f=r,k=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:0},i="Configuration",s={unversionedId:"guides/configuration",id:"guides/configuration",title:"Configuration",description:"In this section, we will introduce how configuration is done in KafkaFlow.",source:"@site/docs/guides/configuration.md",sourceDirName:"guides",slug:"/guides/configuration",permalink:"/kafkaflow/docs/guides/configuration",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/guides/configuration.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/kafkaflow/docs/category/guides"},next:{title:"Producers",permalink:"/kafkaflow/docs/guides/producers"}},l={},c=[{value:"Using a Hosted Service",id:"hosted-service",level:2},{value:"Using ASP.NET Core Startup",id:"aspnet-core-startup",level:2},{value:"Using Startup.cs",id:"startup-class",level:2},{value:"Using other DI Container (Unity or other)",id:"other-di-container",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"In this section, we will introduce how configuration is done in KafkaFlow."),(0,r.kt)("p",null,"KafkaFlow is a highly configured framework. You can customize it through a Fluent Builder."),(0,r.kt)("p",null,"Using the builder, you can configure ",(0,r.kt)("a",{parentName:"p",href:"/kafkaflow/docs/guides/logging"},"Logging"),", Clusters, Producers, Consumers and others."),(0,r.kt)("p",null,"There are a few options to configure KafkaFlow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hosted-service"},"Using a Hosted Service")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#aspnet-core-startup"},"Using ASP.NET Core Startup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#startup-class"},"Using Startup.cs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#other-di-container"},"Using other DI Container (Unity or other)"))),(0,r.kt)("h2",{id:"hosted-service"},"Using a Hosted Service"),(0,r.kt)("p",null,"The Hosted Service model can be used as a hosting model on applications like Console apps."),(0,r.kt)("p",null,"Add the required package references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow\ndotnet add package KafkaFlow.Extensions.Hosting\ndotnet add package KafkaFlow.Microsoft.DependencyInjection\ndotnet add package Microsoft.Extensions.Hosting\n")),(0,r.kt)("p",null,"Register KafkaFlow Hosted Service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using KafkaFlow;\nusing Microsoft.Extensions.Hosting;\n\npublic static class Program\n{\n    private static async Task Main(string[] args)\n    {\n        await Host\n            .CreateDefaultBuilder(args)\n            .ConfigureServices((hostContext, services) =>\n            {\n                services.AddKafkaFlowHostedService(kafka => kafka\n                    .AddCluster(cluster => cluster\n                        .WithBrokers(new[] { "localhost:9092" })\n                        ...\n                    )\n                );\n            })\n            .Build()\n            .RunAsync();\n    }\n}\n')),(0,r.kt)("h2",{id:"aspnet-core-startup"},"Using ASP.NET Core Startup"),(0,r.kt)("p",null,"After .NET 6 the ",(0,r.kt)("inlineCode",{parentName:"p"},"Startup.cs")," class is not required."),(0,r.kt)("p",null,"Add the required package references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow\ndotnet add package KafkaFlow.Microsoft.DependencyInjection\n")),(0,r.kt)("p",null,"To configure KafkaFlow, use the builder to register KafkaFlow dependencies and start the Kafka Bus before the application run. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using KafkaFlow;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddKafka(kafka => kafka\n    .AddCluster(cluster => cluster\n        .WithBrokers(new[] { "localhost:9092" })\n        ...\n    )\n);\n\nvar app = builder.Build();\n\napp.MapGet("/", () => "Hello World!");\n\nvar kafkaBus = app.Services.CreateKafkaBus();\nawait kafkaBus.StartAsync();\n\napp.Run();\n')),(0,r.kt)("h2",{id:"startup-class"},"Using Startup.cs"),(0,r.kt)("p",null,"Add the required package references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow\ndotnet add package KafkaFlow.Microsoft.DependencyInjection\n")),(0,r.kt)("p",null,"To configure KafkaFlow, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigureServices")," method to register KafkaFlow dependencies, and on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Configure")," method register an event to start the Kafka Bus on application start."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void ConfigureServices(IServiceCollection services)\n{\n    services.AddKafka(kafka => kafka\n        .UseConsoleLog()\n        .AddCluster(cluster => cluster\n            .WithBrokers(new[] { "localhost:9092" })\n            ...\n        )\n    );\n}\n\npublic void Configure(\n    IApplicationBuilder app,\n    IWebHostEnvironment env,\n    IHostApplicationLifetime lifetime)\n{\n    var kafkaBus = app.ApplicationServices.CreateKafkaBus();\n\n    lifetime.ApplicationStarted.Register(() => kafkaBus.StartAsync(lifetime.ApplicationStopped));\n}\n')),(0,r.kt)("h2",{id:"other-di-container"},"Using other DI Container (Unity or other)"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to use a DI container other than Unity, check ",(0,r.kt)("a",{parentName:"p",href:"/kafkaflow/docs/guides/dependency-injection"},"how to implement")," it first.")),(0,r.kt)("p",null,"Add the required package references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow\ndotnet add package KafkaFlow.Unity\n")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"KafkaFlowConfigurator")," to specify the desired Dependency Injection container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using KafkaFlow.Configuration;\nusing KafkaFlow.Unity;\nusing Unity;\n\n\nstatic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var container = new UnityContainer();\n\n        var configurator = new KafkaFlowConfigurator(\n            new UnityDependencyConfigurator(container),\n            kafka => kafka\n                .AddCluster(cluster => cluster\n                    .WithBrokers(new[] { "localhost:9092" })\n                    ...\n                )\n        );\n\n        var bus = configurator.CreateBus(new UnityDependencyResolver(container));\n\n        // Call when your app starts\n        await bus.StartAsync();\n\n        // Call when your app stops\n        await bus.StopAsync();\n    }\n}\n')))}p.isMDXComponent=!0}}]);