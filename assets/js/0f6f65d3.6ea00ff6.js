"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4245],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>y});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),i=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=i(r),y=n,u=p["".concat(c,".").concat(y)]||p[y]||f[y]||o;return r?a.createElement(u,l(l({ref:t},m),{},{components:r})):a.createElement(u,l({ref:t},m))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var i=2;i<o;i++)l[i]=r[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=r(7462),n=(r(7294),r(3905));const o={},l="ISchemaRegistryTypeNameResolver.Resolve method",s={unversionedId:"reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/Resolve",id:"reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/Resolve",title:"ISchemaRegistryTypeNameResolver.Resolve method",description:"Resolve the message type name of a schema",source:"@site/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/Resolve.md",sourceDirName:"reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver",slug:"/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/Resolve",permalink:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/Resolve",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/Resolve.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ISchemaRegistryTypeNameResolver interface",permalink:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/"},next:{title:"SchemaRegistryTypeResolver constructor (1 of 2)",permalink:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/SchemaRegistryTypeResolver/"}},c={},i=[{value:"See Also",id:"see-also",level:2}],m={toc:i};function f(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ischemaregistrytypenameresolverresolve-method"},"ISchemaRegistryTypeNameResolver.Resolve method"),(0,n.kt)("p",null,"Resolve the message type name of a schema"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Resolve(int schemaId)\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"schemaId"),(0,n.kt)("td",{parentName:"tr",align:null},"Identifier of the schema")))),(0,n.kt)("h2",{id:"see-also"},"See Also"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"interface\xa0",(0,n.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/"},"ISchemaRegistryTypeNameResolver")),(0,n.kt)("li",{parentName:"ul"},"namespace\xa0",(0,n.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/"},"KafkaFlow"))))}f.isMDXComponent=!0}}]);