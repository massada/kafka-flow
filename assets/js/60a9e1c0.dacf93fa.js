"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9827],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=u(r),f=n,k=p["".concat(s,".").concat(f)]||p[f]||i[f]||o;return r?a.createElement(k,l(l({ref:t},d),{},{components:r})):a.createElement(k,l({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var u=2;u<o;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4369:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>i,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const o={},l="IMessageProducer.Produce method (1 of 2)",c={unversionedId:"reference/KafkaFlow/KafkaFlow/IMessageProducer/Produce",id:"reference/KafkaFlow/KafkaFlow/IMessageProducer/Produce",title:"IMessageProducer.Produce method (1 of 2)",description:"Produces a new message in the configured default topic This should be used for high throughput scenarios//github.com/confluentinc/confluent-kafka-dotnet/wiki/Producer#produceasync-vs-produce",source:"@site/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/Produce.md",sourceDirName:"reference/KafkaFlow/KafkaFlow/IMessageProducer",slug:"/reference/KafkaFlow/KafkaFlow/IMessageProducer/Produce",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/Produce",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/Produce.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IMessageProducer interface",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/"},next:{title:"IMessageProducer.ProduceAsync method (1 of 2)",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/ProduceAsync"}},s={},u=[{value:"See Also",id:"see-also",level:2},{value:"See Also",id:"see-also-1",level:2}],d={toc:u};function i(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"imessageproducerproduce-method-1-of-2"},"IMessageProducer.Produce method (1 of 2)"),(0,n.kt)("p",null,"Produces a new message in the configured default topic This should be used for high throughput scenarios: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/confluentinc/confluent-kafka-dotnet/wiki/Producer#produceasync-vs-produce"},"https://github.com/confluentinc/confluent-kafka-dotnet/wiki/Producer#produceasync-vs-produce")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Produce(object messageKey, object messageValue, IMessageHeaders headers = null, \n    Action<DeliveryReport<byte[], byte[]>> deliveryHandler = null)\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"messageKey"),(0,n.kt)("td",{parentName:"tr",align:null},"The message key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"messageValue"),(0,n.kt)("td",{parentName:"tr",align:null},"The message value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"headers"),(0,n.kt)("td",{parentName:"tr",align:null},"The message headers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"deliveryHandler"),(0,n.kt)("td",{parentName:"tr",align:null},"A handler with the operation result")))),(0,n.kt)("h2",{id:"see-also"},"See Also"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"interface\xa0",(0,n.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/"},"IMessageProducer")),(0,n.kt)("li",{parentName:"ul"},"namespace\xa0",(0,n.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/"},"KafkaFlow"))),(0,n.kt)("hr",null),(0,n.kt)("h1",{id:"imessageproducerproduce-method-2-of-2"},"IMessageProducer.Produce method (2 of 2)"),(0,n.kt)("p",null,"Produces a new message This should be used for high throughput scenarios: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/confluentinc/confluent-kafka-dotnet/wiki/Producer#produceasync-vs-produce"},"https://github.com/confluentinc/confluent-kafka-dotnet/wiki/Producer#produceasync-vs-produce")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Produce(string topic, object messageKey, object messageValue, \n    IMessageHeaders headers = null, Action<DeliveryReport<byte[], byte[]>> deliveryHandler = null)\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"topic"),(0,n.kt)("td",{parentName:"tr",align:null},"The topic where the message wil be produced")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"messageKey"),(0,n.kt)("td",{parentName:"tr",align:null},"The message key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"messageValue"),(0,n.kt)("td",{parentName:"tr",align:null},"The message value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"headers"),(0,n.kt)("td",{parentName:"tr",align:null},"The message headers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"deliveryHandler"),(0,n.kt)("td",{parentName:"tr",align:null},"A handler with the operation result")))),(0,n.kt)("h2",{id:"see-also-1"},"See Also"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"interface\xa0",(0,n.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/IMessageProducer/"},"IMessageProducer")),(0,n.kt)("li",{parentName:"ul"},"namespace\xa0",(0,n.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/"},"KafkaFlow"))))}i.isMDXComponent=!0}}]);